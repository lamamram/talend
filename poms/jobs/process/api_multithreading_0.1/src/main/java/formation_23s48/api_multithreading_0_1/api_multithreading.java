// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package formation_23s48.api_multithreading_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.Convert;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.Slugyfier;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_1
//import java.util.List;

//the import part of tJavaFlex_1
import java.util.HashSet;

@SuppressWarnings("unused")

/**
 * Job: api_multithreading Purpose: consommer la totalité des utilisateurs
 * distants rapidement et sans de conflits<br>
 * Description: 1 - un composant pour "boucler" 2 - faire sortir toues les pages
 * 3 - mapper et convertir 4 - insérer dans la table person -------- 5 -
 * multithreading <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class api_multithreading implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (db_out_conn_Server != null) {

				this.setProperty("db_out_conn_Server", db_out_conn_Server.toString());

			}

			if (db_out_conn_AdditionalParams != null) {

				this.setProperty("db_out_conn_AdditionalParams", db_out_conn_AdditionalParams.toString());

			}

			if (db_out_conn_Login != null) {

				this.setProperty("db_out_conn_Login", db_out_conn_Login.toString());

			}

			if (db_out_conn_Database != null) {

				this.setProperty("db_out_conn_Database", db_out_conn_Database.toString());

			}

			if (db_out_conn_Port != null) {

				this.setProperty("db_out_conn_Port", db_out_conn_Port.toString());

			}

			if (db_out_conn_Password != null) {

				this.setProperty("db_out_conn_Password", db_out_conn_Password.toString());

			}

			if (extern_context_path != null) {

				this.setProperty("extern_context_path", extern_context_path.toString());

			}

			if (project_dir != null) {

				this.setProperty("project_dir", project_dir.toString());

			}

			if (nb_cpu != null) {

				this.setProperty("nb_cpu", nb_cpu.toString());

			}

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

		public String db_out_conn_Server;

		public String getDb_out_conn_Server() {
			return this.db_out_conn_Server;
		}

		public String db_out_conn_AdditionalParams;

		public String getDb_out_conn_AdditionalParams() {
			return this.db_out_conn_AdditionalParams;
		}

		public String db_out_conn_Login;

		public String getDb_out_conn_Login() {
			return this.db_out_conn_Login;
		}

		public String db_out_conn_Database;

		public String getDb_out_conn_Database() {
			return this.db_out_conn_Database;
		}

		public String db_out_conn_Port;

		public String getDb_out_conn_Port() {
			return this.db_out_conn_Port;
		}

		public java.lang.String db_out_conn_Password;

		public java.lang.String getDb_out_conn_Password() {
			return this.db_out_conn_Password;
		}

		public String extern_context_path;

		public String getExtern_context_path() {
			return this.extern_context_path;
		}

		public String project_dir;

		public String getProject_dir() {
			return this.project_dir;
		}

		public Integer nb_cpu;

		public Integer getNb_cpu() {
			return this.nb_cpu;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "api_multithreading";
	private final String projectName = "FORMATION_23S48";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					api_multithreading.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(api_multithreading.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tLoop_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLoop_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLoop_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTClient_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTClient_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tBufferOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTClient_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tBufferInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tBufferInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaFlex_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tBufferInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tBufferInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLMap_1_TXMLMAP_OUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tXMLMap_1_TXMLMAP_IN_error(exception, errorComponent, globalMap);

	}

	public void tXMLMap_1_TXMLMAP_IN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTClient_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLoop_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRESTClient_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tBufferInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLoop_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tLoop_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tLoop_1 begin ] start
				 */

				TalendThreadPool mtp_tJava_1 = new TalendThreadPool(context.nb_cpu);

				globalMap.put("lockWrite_tJava_1", new Object[0]);
				int threadIdCounter_tJava_1 = 0;

				int NB_ITERATE_tJava_1 = 0; // for statistics

				ok_Hash.put("tLoop_1", false);
				start_Hash.put("tLoop_1", System.currentTimeMillis());

				currentComponent = "tLoop_1";

				int tos_count_tLoop_1 = 0;

				int current_iteration_tLoop_1 = 0;

				for (int looptLoop_1 = 1; looptLoop_1 <= 30; looptLoop_1 = looptLoop_1 + 1) {

					current_iteration_tLoop_1++;
					globalMap.put("tLoop_1_CURRENT_VALUE", looptLoop_1);
					globalMap.put("tLoop_1_CURRENT_ITERATION", current_iteration_tLoop_1);

					/**
					 * [tLoop_1 begin ] stop
					 */

					/**
					 * [tLoop_1 main ] start
					 */

					currentComponent = "tLoop_1";

					tos_count_tLoop_1++;

					/**
					 * [tLoop_1 main ] stop
					 */

					/**
					 * [tLoop_1 process_data_begin ] start
					 */

					currentComponent = "tLoop_1";

					/**
					 * [tLoop_1 process_data_begin ] stop
					 */
					NB_ITERATE_tJava_1++;

					class tJava_1Thread extends TalendThread {// implements
																// routines.system.TalendThreadPool.PropertySettable
						class ThreadedMap extends java.util.HashMap<String, Object> {

							private static final long serialVersionUID = 0L;

							public ThreadedMap(java.util.Map<String, Object> globalMap) {
								super(globalMap);
							}

							@Override
							public Object put(String key, Object value) {

								synchronized (api_multithreading.this.obj) {

									super.put(key, value);
									return api_multithreading.this.globalMap.put(key, value);

								}

							}
						}

						private java.util.Map<String, Object> globalMap = null;
						boolean isRunning = false;
						String iterateId = "";

						public tJava_1Thread(java.util.Map<String, Object> globalMap, int threadID) {
							super();

							synchronized (api_multithreading.this.obj) {
								this.globalMap = new ThreadedMap(globalMap);

							}
							iterateId = "." + threadID;

						}

						public void run() {

							java.util.Map threadRunResultMap = new java.util.HashMap();
							threadRunResultMap.put("errorCode", null);
							threadRunResultMap.put("status", "");
							threadLocal.set(threadRunResultMap);

							this.isRunning = true;
							String currentComponent = "";
							java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

							try {

								if (execStat) {
									runStat.updateStatOnConnection("iterate1", 0, "exec" + iterateId);
								}

								/**
								 * [tJava_1 begin ] start
								 */

								ok_Hash.put("tJava_1", false);
								start_Hash.put("tJava_1", System.currentTimeMillis());

								currentComponent = "tJava_1";

								int tos_count_tJava_1 = 0;

								/**
								 * [tJava_1 begin ] stop
								 */

								/**
								 * [tJava_1 main ] start
								 */

								currentComponent = "tJava_1";

								tos_count_tJava_1++;

								/**
								 * [tJava_1 main ] stop
								 */

								/**
								 * [tJava_1 process_data_begin ] start
								 */

								currentComponent = "tJava_1";

								/**
								 * [tJava_1 process_data_begin ] stop
								 */

								/**
								 * [tJava_1 process_data_end ] start
								 */

								currentComponent = "tJava_1";

								/**
								 * [tJava_1 process_data_end ] stop
								 */

								/**
								 * [tJava_1 end ] start
								 */

								currentComponent = "tJava_1";

								ok_Hash.put("tJava_1", true);
								end_Hash.put("tJava_1", System.currentTimeMillis());

								if (execStat) {
									runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
								}
								tRESTClient_1Process(globalMap);

								/**
								 * [tJava_1 end ] stop
								 */
								if (execStat) {
									runStat.updateStatOnConnection("iterate1", 2, "exec" + iterateId);
								}

							} catch (java.lang.Exception e) {
								this.status = "failure";
								Integer localErrorCode = (Integer) (((java.util.Map) threadLocal.get())
										.get("errorCode"));
								if (localErrorCode != null) {
									if (this.errorCode == null || localErrorCode.compareTo(this.errorCode) > 0) {
										this.errorCode = localErrorCode;
									}
								}

								TalendException te = new TalendException(e, currentComponent, globalMap);

								this.exception = te;
								talendThreadPool.setErrorThread(this);
								talendThreadPool.stopAllWorkers();

							} catch (java.lang.Error error) {
								this.status = "failure";
								Integer localErrorCode = (Integer) (((java.util.Map) threadLocal.get())
										.get("errorCode"));
								if (localErrorCode != null) {
									if (this.errorCode == null || localErrorCode.compareTo(this.errorCode) > 0) {
										this.errorCode = localErrorCode;
									}
								}
								this.error = error;
								talendThreadPool.setErrorThread(this);
								talendThreadPool.stopAllWorkers();
							} finally {
								try {

									/**
									 * [tJava_1 finally ] start
									 */

									currentComponent = "tJava_1";

									/**
									 * [tJava_1 finally ] stop
									 */
								} catch (java.lang.Exception e) {
									// ignore
								} catch (java.lang.Error error) {
									// ignore
								}
								resourceMap = null;
							}
							this.isRunning = false;

							Integer localErrorCode = (Integer) (((java.util.Map) threadLocal.get()).get("errorCode"));
							String localStatus = (String) (((java.util.Map) threadLocal.get()).get("status"));
							if (localErrorCode != null) {
								if (this.errorCode == null || localErrorCode.compareTo(this.errorCode) > 0) {
									this.errorCode = localErrorCode;
								}
							}
							if (!this.status.equals("failure")) {
								this.status = localStatus;
							}

							talendThreadPool.getTalendThreadResult().setErrorCode(this.errorCode);
							talendThreadPool.getTalendThreadResult().setStatus(this.status);
						}
					}

					tJava_1Thread bt_tJava_1 = new tJava_1Thread(globalMap, threadIdCounter_tJava_1++);
					mtp_tJava_1.execute(bt_tJava_1);

					/**
					 * [tLoop_1 process_data_end ] start
					 */

					currentComponent = "tLoop_1";

					/**
					 * [tLoop_1 process_data_end ] stop
					 */

					/**
					 * [tLoop_1 end ] start
					 */

					currentComponent = "tLoop_1";

				}

				ok_Hash.put("tLoop_1", true);
				end_Hash.put("tLoop_1", System.currentTimeMillis());

				mtp_tJava_1.waitForEndOfQueue();

				TalendThread errorThread_tJava_1 = mtp_tJava_1.getErrorThread();

				if (errorThread_tJava_1 != null) {
					if (errorThread_tJava_1.errorCode != null) {
						if (errorCode == null || errorThread_tJava_1.errorCode.compareTo(errorCode) > 0) {
							errorCode = errorThread_tJava_1.errorCode;
						}
					}
					if (!status.equals("failure")) {
						status = errorThread_tJava_1.status;
					}
					if (errorThread_tJava_1.exception != null) {
						throw errorThread_tJava_1.exception;
					}
					if (errorThread_tJava_1.error != null) {
						throw errorThread_tJava_1.error;
					}
				} else {
					Integer threadErrorCode = mtp_tJava_1.getTalendThreadResult().getErrorCode();
					String threadStatus = mtp_tJava_1.getTalendThreadResult().getStatus();

					if (threadErrorCode != null) {
						if (errorCode == null || threadErrorCode.compareTo(errorCode) > 0) {
							errorCode = threadErrorCode;
						}
					}
					if (!status.equals("failure")) {
						status = threadStatus;
					}
				}

				/**
				 * [tLoop_1 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tLoop_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tBufferInput_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tLoop_1 finally ] start
				 */

				currentComponent = "tLoop_1";

				/**
				 * [tLoop_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLoop_1_SUBPROCESS_STATE", 1);
	}

	public static class buffer_inStruct implements routines.system.IPersistableRow<buffer_inStruct> {
		final static byte[] commonByteArrayLock_FORMATION_23S48_api_multithreading = new byte[0];
		static byte[] commonByteArray_FORMATION_23S48_api_multithreading = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public String last_name;

		public String getLast_name() {
			return this.last_name;
		}

		public String first_name;

		public String getFirst_name() {
			return this.first_name;
		}

		public String email;

		public String getEmail() {
			return this.email;
		}

		public Boolean active;

		public Boolean getActive() {
			return this.active;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final buffer_inStruct other = (buffer_inStruct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(buffer_inStruct other) {

			other.id = this.id;
			other.last_name = this.last_name;
			other.first_name = this.first_name;
			other.email = this.email;
			other.active = this.active;

		}

		public void copyKeysDataTo(buffer_inStruct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FORMATION_23S48_api_multithreading.length) {
					if (length < 1024 && commonByteArray_FORMATION_23S48_api_multithreading.length == 0) {
						commonByteArray_FORMATION_23S48_api_multithreading = new byte[1024];
					} else {
						commonByteArray_FORMATION_23S48_api_multithreading = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FORMATION_23S48_api_multithreading, 0, length);
				strReturn = new String(commonByteArray_FORMATION_23S48_api_multithreading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FORMATION_23S48_api_multithreading.length) {
					if (length < 1024 && commonByteArray_FORMATION_23S48_api_multithreading.length == 0) {
						commonByteArray_FORMATION_23S48_api_multithreading = new byte[1024];
					} else {
						commonByteArray_FORMATION_23S48_api_multithreading = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_FORMATION_23S48_api_multithreading, 0, length);
				strReturn = new String(commonByteArray_FORMATION_23S48_api_multithreading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FORMATION_23S48_api_multithreading) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.last_name = readString(dis);

					this.first_name = readString(dis);

					this.email = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.active = null;
					} else {
						this.active = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_FORMATION_23S48_api_multithreading) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.last_name = readString(dis);

					this.first_name = readString(dis);

					this.email = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.active = null;
					} else {
						this.active = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// String

				writeString(this.last_name, dos);

				// String

				writeString(this.first_name, dos);

				// String

				writeString(this.email, dos);

				// Boolean

				if (this.active == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.active);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.id);

				// String

				writeString(this.last_name, dos);

				// String

				writeString(this.first_name, dos);

				// String

				writeString(this.email, dos);

				// Boolean

				if (this.active == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.active);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",last_name=" + last_name);
			sb.append(",first_name=" + first_name);
			sb.append(",email=" + email);
			sb.append(",active=" + String.valueOf(active));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(buffer_inStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_FORMATION_23S48_api_multithreading = new byte[0];
		static byte[] commonByteArray_FORMATION_23S48_api_multithreading = new byte[0];

		public Integer statusCode;

		public Integer getStatusCode() {
			return this.statusCode;
		}

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public String string;

		public String getString() {
			return this.string;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FORMATION_23S48_api_multithreading.length) {
					if (length < 1024 && commonByteArray_FORMATION_23S48_api_multithreading.length == 0) {
						commonByteArray_FORMATION_23S48_api_multithreading = new byte[1024];
					} else {
						commonByteArray_FORMATION_23S48_api_multithreading = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FORMATION_23S48_api_multithreading, 0, length);
				strReturn = new String(commonByteArray_FORMATION_23S48_api_multithreading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FORMATION_23S48_api_multithreading.length) {
					if (length < 1024 && commonByteArray_FORMATION_23S48_api_multithreading.length == 0) {
						commonByteArray_FORMATION_23S48_api_multithreading = new byte[1024];
					} else {
						commonByteArray_FORMATION_23S48_api_multithreading = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_FORMATION_23S48_api_multithreading, 0, length);
				strReturn = new String(commonByteArray_FORMATION_23S48_api_multithreading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FORMATION_23S48_api_multithreading) {

				try {

					int length = 0;

					this.statusCode = readInteger(dis);

					this.body = (routines.system.Document) dis.readObject();

					this.string = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_FORMATION_23S48_api_multithreading) {

				try {

					int length = 0;

					this.statusCode = readInteger(dis);

					this.body = (routines.system.Document) dis.readObject();

					this.string = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.statusCode, dos);

				// Document

				dos.writeObject(this.body);

				// String

				writeString(this.string, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.statusCode, dos);

				// Document

				dos.writeObject(this.body);

				// String

				writeString(this.string, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("statusCode=" + String.valueOf(statusCode));
			sb.append(",body=" + String.valueOf(body));
			sb.append(",string=" + string);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tRESTClient_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRESTClient_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();
				buffer_inStruct buffer_in = new buffer_inStruct();

				/**
				 * [tXMLMap_1_TXMLMAP_OUT begin ] start
				 */

				ok_Hash.put("tXMLMap_1_TXMLMAP_OUT", false);
				start_Hash.put("tXMLMap_1_TXMLMAP_OUT", System.currentTimeMillis());

				currentVirtualComponent = "tXMLMap_1";

				currentComponent = "tXMLMap_1_TXMLMAP_OUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tXMLMap_1_TXMLMAP_OUT = 0;

//===============================input xml init part===============================
				class XML_API_tXMLMap_1_TXMLMAP_OUT {
					public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node).attribute("nil");
							if (attri != null && ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}
				class Var__tXMLMap_1_TXMLMAP_OUT__Struct {
				}
				Var__tXMLMap_1_TXMLMAP_OUT__Struct Var__tXMLMap_1_TXMLMAP_OUT = new Var__tXMLMap_1_TXMLMAP_OUT__Struct();
// ###############################
// # Outputs initialization
				buffer_inStruct buffer_in_tmp = new buffer_inStruct();
				buffer_inStruct buffer_in_save = null;
//the aggregate variable
				buffer_inStruct buffer_in_aggregate = null;
//init the resultset for aggregate
				java.util.List<Object> allOutsForAggregate_tXMLMap_1 = new java.util.ArrayList<Object>();
				globalMap.put("allOutsForAggregate_tXMLMap_1", allOutsForAggregate_tXMLMap_1);
// ###############################
				class TreeNode_API_tXMLMap_1_TXMLMAP_OUT {
					java.util.Map<String, String> xpath_value_map = new java.util.HashMap<String, String>();

					void clear() {
						xpath_value_map.clear();
					}

					void put(String xpath, String value) {
						xpath_value_map.put(xpath, value);
					}

					String get_null(String xpath) {
						return null;
					}

					Integer get_Integer(String xpath) {
						String content = xpath_value_map.get(xpath);
						if (content == null || content.length() == 0)
							return null;
						return ParserUtils.parseTo_Integer(content);
					}

					String get_String(String xpath) {
						return xpath_value_map.get(xpath);
					}
				}
				TreeNode_API_tXMLMap_1_TXMLMAP_OUT treeNodeAPI_tXMLMap_1_TXMLMAP_OUT = new TreeNode_API_tXMLMap_1_TXMLMAP_OUT();
				NameSpaceTool nsTool_tXMLMap_1_TXMLMAP_OUT = new NameSpaceTool();
				int nb_line_tXMLMap_1_TXMLMAP_OUT = 0;

				XML_API_tXMLMap_1_TXMLMAP_OUT xml_api_tXMLMap_1_TXMLMAP_OUT = new XML_API_tXMLMap_1_TXMLMAP_OUT();

				// the map store the previous value of aggregate columns
				java.util.Map<String, Object> aggregateCacheMap_tXMLMap_1_TXMLMAP_OUT = new java.util.HashMap<String, Object>();

				/**
				 * [tXMLMap_1_TXMLMAP_OUT begin ] stop
				 */

				/**
				 * [tRESTClient_1 begin ] start
				 */

				ok_Hash.put("tRESTClient_1", false);
				start_Hash.put("tRESTClient_1", System.currentTimeMillis());

				currentComponent = "tRESTClient_1";

				int tos_count_tRESTClient_1 = 0;

				/**
				 * [tRESTClient_1 begin ] stop
				 */

				/**
				 * [tRESTClient_1 main ] start
				 */

				currentComponent = "tRESTClient_1";

				row2 = null;

// expected response body
				Object responseDoc_tRESTClient_1 = null;

				try {
					// request body
					org.dom4j.Document requestDoc_tRESTClient_1 = null;
					String requestString_tRESTClient_1 = null;

					Object requestBody_tRESTClient_1 = requestDoc_tRESTClient_1 != null ? requestDoc_tRESTClient_1
							: requestString_tRESTClient_1;

					// resposne class name
					Class<?> responseClass_tRESTClient_1 = org.dom4j.Document.class;

					// create web client instance
					org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean factoryBean_tRESTClient_1 = new org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean();

					boolean inOSGi = routines.system.BundleUtils.inOSGi();

					final java.util.List<org.apache.cxf.feature.Feature> features_tRESTClient_1 = new java.util.ArrayList<org.apache.cxf.feature.Feature>();

					String url = "https://gorest.co.in/public/v2/";
					// {baseUri}tRESTClient
					factoryBean_tRESTClient_1.setServiceName(new javax.xml.namespace.QName(url, "tRESTClient"));
					factoryBean_tRESTClient_1.setAddress(url);

					factoryBean_tRESTClient_1.setFeatures(features_tRESTClient_1);

					java.util.List<Object> providers_tRESTClient_1 = new java.util.ArrayList<Object>();
					providers_tRESTClient_1.add(new org.apache.cxf.jaxrs.provider.dom4j.DOM4JProvider() {
						// workaround for https://jira.talendforge.org/browse/TESB-7276
						public org.dom4j.Document readFrom(Class<org.dom4j.Document> cls, java.lang.reflect.Type type,
								java.lang.annotation.Annotation[] anns, javax.ws.rs.core.MediaType mt,
								javax.ws.rs.core.MultivaluedMap<String, String> headers, java.io.InputStream is)
								throws IOException, javax.ws.rs.WebApplicationException {
							String contentLength = headers.getFirst("Content-Length");
							if (!org.apache.cxf.common.util.StringUtils.isEmpty(contentLength)
									&& Integer.valueOf(contentLength) <= 0) {
								try {
									return org.dom4j.DocumentHelper.parseText("<root/>");
								} catch (org.dom4j.DocumentException e_tRESTClient_1) {
									e_tRESTClient_1.printStackTrace();
								}
								return null;
							}
							return super.readFrom(cls, type, anns, mt, headers, is);
						}
					});
					org.apache.cxf.jaxrs.provider.json.JSONProvider jsonProvider_tRESTClient_1 = new org.apache.cxf.jaxrs.provider.json.JSONProvider();
					jsonProvider_tRESTClient_1.setIgnoreNamespaces(true);
					jsonProvider_tRESTClient_1.setAttributesToElements(true);

					jsonProvider_tRESTClient_1.setSupportUnwrapped(true);
					jsonProvider_tRESTClient_1.setWrapperName("root");

					jsonProvider_tRESTClient_1.setDropRootElement(false);
					jsonProvider_tRESTClient_1.setConvertTypesToStrings(false);
					providers_tRESTClient_1.add(jsonProvider_tRESTClient_1);
					factoryBean_tRESTClient_1.setProviders(providers_tRESTClient_1);
					factoryBean_tRESTClient_1.setTransportId("http://cxf.apache.org/transports/http");

					boolean use_auth_tRESTClient_1 = false;

					org.apache.cxf.jaxrs.client.WebClient webClient_tRESTClient_1 = factoryBean_tRESTClient_1
							.createWebClient();

					// set request path
					webClient_tRESTClient_1.path("users");

					// set connection properties
					org.apache.cxf.jaxrs.client.ClientConfiguration clientConfig_tRESTClient_1 = org.apache.cxf.jaxrs.client.WebClient
							.getConfig(webClient_tRESTClient_1);
					org.apache.cxf.transport.http.auth.HttpAuthSupplier httpAuthSupplerHttpConduit = null;
					org.apache.cxf.transport.http.HTTPConduit conduit_tRESTClient_1 = clientConfig_tRESTClient_1
							.getHttpConduit();

					if (clientConfig_tRESTClient_1.getEndpoint() != null) {
						org.apache.cxf.service.model.EndpointInfo endpointInfo_tRESTClient_1 = clientConfig_tRESTClient_1
								.getEndpoint().getEndpointInfo();
						if (endpointInfo_tRESTClient_1 != null) {
							endpointInfo_tRESTClient_1.setProperty("enable.webclient.operation.reporting", true);
						}
					}

					if (!inOSGi) {
						conduit_tRESTClient_1.getClient().setReceiveTimeout((long) (60 * 1000L));
						conduit_tRESTClient_1.getClient().setConnectionTimeout((long) (30 * 1000L));
						boolean use_proxy_tRESTClient_1 = false;

					}

					// set Accept-Type
					webClient_tRESTClient_1.accept("application/json");

					// set optional query and header properties if any

					if (use_auth_tRESTClient_1 && "OAUTH2_BEARER".equals("BASIC")) {
						// set oAuth2 bearer token
						org.apache.cxf.rs.security.oauth2.client.BearerAuthSupplier authSupplier = new org.apache.cxf.rs.security.oauth2.client.BearerAuthSupplier();
						authSupplier.setAccessToken("");
						conduit_tRESTClient_1.setAuthSupplier(authSupplier);
					}

					// if FORM request then capture query parameters into Form, otherwise set them
					// as queries

					webClient_tRESTClient_1.query("page", ((Integer) globalMap.get("tLoop_1_CURRENT_VALUE")));

					webClient_tRESTClient_1.query("per_page", "100");

					try {
						// start send request

						responseDoc_tRESTClient_1 = webClient_tRESTClient_1.get();
						javax.ws.rs.core.Response responseObjBase_tRESTClient_1 = (javax.ws.rs.core.Response) responseDoc_tRESTClient_1;
						int status_tRESTClient_1 = responseObjBase_tRESTClient_1.getStatus();
						if (status_tRESTClient_1 != 304 && status_tRESTClient_1 >= 300
								&& responseClass_tRESTClient_1 != javax.ws.rs.core.Response.class) {
							throw org.apache.cxf.jaxrs.utils.ExceptionUtils.toWebApplicationException(
									(javax.ws.rs.core.Response) responseObjBase_tRESTClient_1);
						}
						if (responseObjBase_tRESTClient_1.getEntity() != null) {
							responseDoc_tRESTClient_1 = responseObjBase_tRESTClient_1
									.readEntity(responseClass_tRESTClient_1);
						}

						int webClientResponseStatus_tRESTClient_1 = webClient_tRESTClient_1.getResponse().getStatus();
						if (webClientResponseStatus_tRESTClient_1 >= 300) {
							throw new javax.ws.rs.WebApplicationException(webClient_tRESTClient_1.getResponse());
						}

						if (row2 == null) {
							row2 = new row2Struct();
						}

						row2.statusCode = webClientResponseStatus_tRESTClient_1;
						row2.string = "";

						{
							Object responseObj_tRESTClient_1 = responseDoc_tRESTClient_1;

							if (responseObj_tRESTClient_1 != null) {
								if (responseClass_tRESTClient_1 == String.class
										&& responseObj_tRESTClient_1 instanceof String) {
									row2.string = (String) responseObj_tRESTClient_1;
								} else {
									routines.system.Document responseTalendDoc_tRESTClient_1 = null;
									if (null != responseObj_tRESTClient_1) {
										responseTalendDoc_tRESTClient_1 = new routines.system.Document();
										if (responseObj_tRESTClient_1 instanceof org.dom4j.Document) {
											responseTalendDoc_tRESTClient_1
													.setDocument((org.dom4j.Document) responseObj_tRESTClient_1);
										}
									}
									row2.body = responseTalendDoc_tRESTClient_1;
								}
							}
						}

						globalMap.put("tRESTClient_1_HEADERS", webClient_tRESTClient_1.getResponse().getHeaders());
						globalMap.put("tRESTClient_1_COOKIES", webClient_tRESTClient_1.getResponse().getCookies());

					} catch (javax.ws.rs.WebApplicationException ex_tRESTClient_1) {
						globalMap.put("tRESTClient_1_ERROR_MESSAGE", ex_tRESTClient_1.getMessage());

						throw ex_tRESTClient_1;

					}

				} catch (Exception e_tRESTClient_1) {
					globalMap.put("tRESTClient_1_ERROR_MESSAGE", e_tRESTClient_1.getMessage());

					throw new TalendException(e_tRESTClient_1, currentComponent, globalMap);

				}

				tos_count_tRESTClient_1++;

				/**
				 * [tRESTClient_1 main ] stop
				 */

				/**
				 * [tRESTClient_1 process_data_begin ] start
				 */

				currentComponent = "tRESTClient_1";

				/**
				 * [tRESTClient_1 process_data_begin ] stop
				 */
// Start of branch "row2"
				if (row2 != null) {

					/**
					 * [tXMLMap_1_TXMLMAP_OUT main ] start
					 */

					currentVirtualComponent = "tXMLMap_1";

					currentComponent = "tXMLMap_1_TXMLMAP_OUT";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row2"

						);
					}

					boolean rejectedInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;
					boolean rejectedDocInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;
					boolean mainRowRejected_tXMLMap_1_TXMLMAP_OUT = false;
					boolean isMatchDocRowtXMLMap_1_TXMLMAP_OUT = false;

					// init document to flat tool
					routines.system.DocumentToFlat docToFlat_tXMLMap_1_TXMLMAP_OUT = new routines.system.DocumentToFlat();
					docToFlat_tXMLMap_1_TXMLMAP_OUT.setOriginalLoop("/root/root");
					docToFlat_tXMLMap_1_TXMLMAP_OUT.setIsOptional(false);
					if (row2.body == null || row2.body.getDocument() == null) {
						throw new RuntimeException("row2.body can't be empty");
					}
					org.dom4j.Document doc_tXMLMap_1_TXMLMAP_OUT = row2.body.getDocument();
					docToFlat_tXMLMap_1_TXMLMAP_OUT.setDoc(doc_tXMLMap_1_TXMLMAP_OUT);
					docToFlat_tXMLMap_1_TXMLMAP_OUT.setDefineNS(false);
					docToFlat_tXMLMap_1_TXMLMAP_OUT.setNamespaceTool(nsTool_tXMLMap_1_TXMLMAP_OUT);

					// old version, find NS from doc
					nsTool_tXMLMap_1_TXMLMAP_OUT.countNSMap(doc_tXMLMap_1_TXMLMAP_OUT.getRootElement());
					java.util.HashMap<String, String> xmlNameSpaceMap_tXMLMap_1_TXMLMAP_OUT = nsTool_tXMLMap_1_TXMLMAP_OUT.xmlNameSpaceMap;

					docToFlat_tXMLMap_1_TXMLMAP_OUT.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_1_TXMLMAP_OUT);

					String[] absolutePathMappings_tXMLMap_1_TXMLMAP_OUT = new String[4];
					String[] relativePathMappings_tXMLMap_1_TXMLMAP_OUT = new String[4];

					absolutePathMappings_tXMLMap_1_TXMLMAP_OUT[0] = "row2.body:/root/root/name";
					relativePathMappings_tXMLMap_1_TXMLMAP_OUT[0] = "name";

					absolutePathMappings_tXMLMap_1_TXMLMAP_OUT[1] = "row2.body:/root/root/id";
					relativePathMappings_tXMLMap_1_TXMLMAP_OUT[1] = "id";

					absolutePathMappings_tXMLMap_1_TXMLMAP_OUT[2] = "row2.body:/root/root/status";
					relativePathMappings_tXMLMap_1_TXMLMAP_OUT[2] = "status";

					absolutePathMappings_tXMLMap_1_TXMLMAP_OUT[3] = "row2.body:/root/root/email";
					relativePathMappings_tXMLMap_1_TXMLMAP_OUT[3] = "email";

					docToFlat_tXMLMap_1_TXMLMAP_OUT.setAbsolutePathMappings(absolutePathMappings_tXMLMap_1_TXMLMAP_OUT);
					docToFlat_tXMLMap_1_TXMLMAP_OUT
							.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_1_TXMLMAP_OUT);
					// generate document to flat data
					docToFlat_tXMLMap_1_TXMLMAP_OUT.flat();
					// get flat data
					java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_1_TXMLMAP_OUT = docToFlat_tXMLMap_1_TXMLMAP_OUT
							.getResultSet();

					for (java.util.Map<String, String> oneRow_tXMLMap_1_TXMLMAP_OUT : resultSet_tXMLMap_1_TXMLMAP_OUT) { // G_TXM_M_001
						nb_line_tXMLMap_1_TXMLMAP_OUT++;
						rejectedInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;
						rejectedDocInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;
						mainRowRejected_tXMLMap_1_TXMLMAP_OUT = false;
						isMatchDocRowtXMLMap_1_TXMLMAP_OUT = false;

						treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.clear();
						for (java.util.Map.Entry<String, String> entry_tXMLMap_1_TXMLMAP_OUT : oneRow_tXMLMap_1_TXMLMAP_OUT
								.entrySet()) {
							treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.put(entry_tXMLMap_1_TXMLMAP_OUT.getKey(),
									entry_tXMLMap_1_TXMLMAP_OUT.getValue());
						}

						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tXMLMap_1_TXMLMAP_OUT__Struct Var = Var__tXMLMap_1_TXMLMAP_OUT;
							// ###############################
							// # Output tables

							buffer_in = null;

// # Output table : 'buffer_in'

							buffer_in_tmp = new buffer_inStruct();
							buffer_in_tmp.id = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_Integer("row2.body:/root/root/id");
							buffer_in_tmp.last_name = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT
									.get_String("row2.body:/root/root/name");
							buffer_in_tmp.first_name = "";
							buffer_in_tmp.email = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT
									.get_String("row2.body:/root/root/email");
							buffer_in_tmp.active = Convert.toBoolean("active",
									treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row2.body:/root/root/status"));
							allOutsForAggregate_tXMLMap_1.add(buffer_in_tmp);

// ###############################

						} // end of Var scope

						rejectedInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;

					} // G_TXM_M_001 close

					tos_count_tXMLMap_1_TXMLMAP_OUT++;

					/**
					 * [tXMLMap_1_TXMLMAP_OUT main ] stop
					 */

					/**
					 * [tXMLMap_1_TXMLMAP_OUT process_data_begin ] start
					 */

					currentVirtualComponent = "tXMLMap_1";

					currentComponent = "tXMLMap_1_TXMLMAP_OUT";

					/**
					 * [tXMLMap_1_TXMLMAP_OUT process_data_begin ] stop
					 */

					/**
					 * [tXMLMap_1_TXMLMAP_OUT process_data_end ] start
					 */

					currentVirtualComponent = "tXMLMap_1";

					currentComponent = "tXMLMap_1_TXMLMAP_OUT";

					/**
					 * [tXMLMap_1_TXMLMAP_OUT process_data_end ] stop
					 */

				} // End of branch "row2"

				/**
				 * [tRESTClient_1 process_data_end ] start
				 */

				currentComponent = "tRESTClient_1";

				/**
				 * [tRESTClient_1 process_data_end ] stop
				 */

				/**
				 * [tRESTClient_1 end ] start
				 */

				currentComponent = "tRESTClient_1";

				if (globalMap.get("tRESTClient_1_NB_LINE") == null) {
					globalMap.put("tRESTClient_1_NB_LINE", 1);
				}

// [tRESTCliend_end]

				ok_Hash.put("tRESTClient_1", true);
				end_Hash.put("tRESTClient_1", System.currentTimeMillis());

				/**
				 * [tRESTClient_1 end ] stop
				 */

				/**
				 * [tXMLMap_1_TXMLMAP_OUT end ] start
				 */

				currentVirtualComponent = "tXMLMap_1";

				currentComponent = "tXMLMap_1_TXMLMAP_OUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tXMLMap_1_TXMLMAP_OUT", true);
				end_Hash.put("tXMLMap_1_TXMLMAP_OUT", System.currentTimeMillis());

				/**
				 * [tXMLMap_1_TXMLMAP_OUT end ] stop
				 */

				/**
				 * [tBufferOutput_1 begin ] start
				 */

				ok_Hash.put("tBufferOutput_1", false);
				start_Hash.put("tBufferOutput_1", System.currentTimeMillis());

				currentComponent = "tBufferOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "buffer_in");
				}

				int tos_count_tBufferOutput_1 = 0;

				/**
				 * [tBufferOutput_1 begin ] stop
				 */

				/**
				 * [tXMLMap_1_TXMLMAP_IN begin ] start
				 */

				ok_Hash.put("tXMLMap_1_TXMLMAP_IN", false);
				start_Hash.put("tXMLMap_1_TXMLMAP_IN", System.currentTimeMillis());

				currentVirtualComponent = "tXMLMap_1";

				currentComponent = "tXMLMap_1_TXMLMAP_IN";

				int tos_count_tXMLMap_1_TXMLMAP_IN = 0;

				java.util.List<Object> outs_tXMLMap_1 = (java.util.List<Object>) globalMap
						.get("allOutsForAggregate_tXMLMap_1");
				for (Object row_out_tXMLMap_1_TXMLMAP_IN : outs_tXMLMap_1) {// TD512

					/**
					 * [tXMLMap_1_TXMLMAP_IN begin ] stop
					 */

					/**
					 * [tXMLMap_1_TXMLMAP_IN main ] start
					 */

					currentVirtualComponent = "tXMLMap_1";

					currentComponent = "tXMLMap_1_TXMLMAP_IN";

					buffer_in = null;
					if (row_out_tXMLMap_1_TXMLMAP_IN != null
							&& row_out_tXMLMap_1_TXMLMAP_IN instanceof buffer_inStruct) {
						buffer_in = (buffer_inStruct) row_out_tXMLMap_1_TXMLMAP_IN;
					}

					tos_count_tXMLMap_1_TXMLMAP_IN++;

					/**
					 * [tXMLMap_1_TXMLMAP_IN main ] stop
					 */

					/**
					 * [tXMLMap_1_TXMLMAP_IN process_data_begin ] start
					 */

					currentVirtualComponent = "tXMLMap_1";

					currentComponent = "tXMLMap_1_TXMLMAP_IN";

					/**
					 * [tXMLMap_1_TXMLMAP_IN process_data_begin ] stop
					 */
// Start of branch "buffer_in"
					if (buffer_in != null) {

						/**
						 * [tBufferOutput_1 main ] start
						 */

						currentComponent = "tBufferOutput_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "buffer_in"

							);
						}

						String[] row_tBufferOutput_1 = new String[] { "", "", "", "", "", };
						row_tBufferOutput_1[0] = String.valueOf(buffer_in.id);

						if (buffer_in.last_name != null) {

							row_tBufferOutput_1[1] = buffer_in.last_name;

						} else {
							row_tBufferOutput_1[1] = null;
						}
						if (buffer_in.first_name != null) {

							row_tBufferOutput_1[2] = buffer_in.first_name;

						} else {
							row_tBufferOutput_1[2] = null;
						}
						if (buffer_in.email != null) {

							row_tBufferOutput_1[3] = buffer_in.email;

						} else {
							row_tBufferOutput_1[3] = null;
						}
						if (buffer_in.active != null) {

							row_tBufferOutput_1[4] = String.valueOf(buffer_in.active);

						} else {
							row_tBufferOutput_1[4] = null;
						}
						globalBuffer.add(row_tBufferOutput_1);

						tos_count_tBufferOutput_1++;

						/**
						 * [tBufferOutput_1 main ] stop
						 */

						/**
						 * [tBufferOutput_1 process_data_begin ] start
						 */

						currentComponent = "tBufferOutput_1";

						/**
						 * [tBufferOutput_1 process_data_begin ] stop
						 */

						/**
						 * [tBufferOutput_1 process_data_end ] start
						 */

						currentComponent = "tBufferOutput_1";

						/**
						 * [tBufferOutput_1 process_data_end ] stop
						 */

					} // End of branch "buffer_in"

					/**
					 * [tXMLMap_1_TXMLMAP_IN process_data_end ] start
					 */

					currentVirtualComponent = "tXMLMap_1";

					currentComponent = "tXMLMap_1_TXMLMAP_IN";

					/**
					 * [tXMLMap_1_TXMLMAP_IN process_data_end ] stop
					 */

					/**
					 * [tXMLMap_1_TXMLMAP_IN end ] start
					 */

					currentVirtualComponent = "tXMLMap_1";

					currentComponent = "tXMLMap_1_TXMLMAP_IN";

				} // TD512

				ok_Hash.put("tXMLMap_1_TXMLMAP_IN", true);
				end_Hash.put("tXMLMap_1_TXMLMAP_IN", System.currentTimeMillis());

				/**
				 * [tXMLMap_1_TXMLMAP_IN end ] stop
				 */

				/**
				 * [tBufferOutput_1 end ] start
				 */

				currentComponent = "tBufferOutput_1";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "buffer_in");
				}

				ok_Hash.put("tBufferOutput_1", true);
				end_Hash.put("tBufferOutput_1", System.currentTimeMillis());

				/**
				 * [tBufferOutput_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRESTClient_1 finally ] start
				 */

				currentComponent = "tRESTClient_1";

				/**
				 * [tRESTClient_1 finally ] stop
				 */

				/**
				 * [tXMLMap_1_TXMLMAP_OUT finally ] start
				 */

				currentVirtualComponent = "tXMLMap_1";

				currentComponent = "tXMLMap_1_TXMLMAP_OUT";

				/**
				 * [tXMLMap_1_TXMLMAP_OUT finally ] stop
				 */

				/**
				 * [tXMLMap_1_TXMLMAP_IN finally ] start
				 */

				currentVirtualComponent = "tXMLMap_1";

				currentComponent = "tXMLMap_1_TXMLMAP_IN";

				/**
				 * [tXMLMap_1_TXMLMAP_IN finally ] stop
				 */

				/**
				 * [tBufferOutput_1 finally ] start
				 */

				currentComponent = "tBufferOutput_1";

				/**
				 * [tBufferOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRESTClient_1_SUBPROCESS_STATE", 1);
	}

	public static class personsStruct implements routines.system.IPersistableRow<personsStruct> {
		final static byte[] commonByteArrayLock_FORMATION_23S48_api_multithreading = new byte[0];
		static byte[] commonByteArray_FORMATION_23S48_api_multithreading = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public String last_name;

		public String getLast_name() {
			return this.last_name;
		}

		public String first_name;

		public String getFirst_name() {
			return this.first_name;
		}

		public String email;

		public String getEmail() {
			return this.email;
		}

		public Boolean active;

		public Boolean getActive() {
			return this.active;
		}

		public String slug;

		public String getSlug() {
			return this.slug;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final personsStruct other = (personsStruct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(personsStruct other) {

			other.id = this.id;
			other.last_name = this.last_name;
			other.first_name = this.first_name;
			other.email = this.email;
			other.active = this.active;
			other.slug = this.slug;

		}

		public void copyKeysDataTo(personsStruct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FORMATION_23S48_api_multithreading.length) {
					if (length < 1024 && commonByteArray_FORMATION_23S48_api_multithreading.length == 0) {
						commonByteArray_FORMATION_23S48_api_multithreading = new byte[1024];
					} else {
						commonByteArray_FORMATION_23S48_api_multithreading = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FORMATION_23S48_api_multithreading, 0, length);
				strReturn = new String(commonByteArray_FORMATION_23S48_api_multithreading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FORMATION_23S48_api_multithreading.length) {
					if (length < 1024 && commonByteArray_FORMATION_23S48_api_multithreading.length == 0) {
						commonByteArray_FORMATION_23S48_api_multithreading = new byte[1024];
					} else {
						commonByteArray_FORMATION_23S48_api_multithreading = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_FORMATION_23S48_api_multithreading, 0, length);
				strReturn = new String(commonByteArray_FORMATION_23S48_api_multithreading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FORMATION_23S48_api_multithreading) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.last_name = readString(dis);

					this.first_name = readString(dis);

					this.email = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.active = null;
					} else {
						this.active = dis.readBoolean();
					}

					this.slug = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_FORMATION_23S48_api_multithreading) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.last_name = readString(dis);

					this.first_name = readString(dis);

					this.email = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.active = null;
					} else {
						this.active = dis.readBoolean();
					}

					this.slug = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// String

				writeString(this.last_name, dos);

				// String

				writeString(this.first_name, dos);

				// String

				writeString(this.email, dos);

				// Boolean

				if (this.active == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.active);
				}

				// String

				writeString(this.slug, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.id);

				// String

				writeString(this.last_name, dos);

				// String

				writeString(this.first_name, dos);

				// String

				writeString(this.email, dos);

				// Boolean

				if (this.active == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.active);
				}

				// String

				writeString(this.slug, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",last_name=" + last_name);
			sb.append(",first_name=" + first_name);
			sb.append(",email=" + email);
			sb.append(",active=" + String.valueOf(active));
			sb.append(",slug=" + slug);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(personsStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class usersStruct implements routines.system.IPersistableRow<usersStruct> {
		final static byte[] commonByteArrayLock_FORMATION_23S48_api_multithreading = new byte[0];
		static byte[] commonByteArray_FORMATION_23S48_api_multithreading = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public String last_name;

		public String getLast_name() {
			return this.last_name;
		}

		public String first_name;

		public String getFirst_name() {
			return this.first_name;
		}

		public String email;

		public String getEmail() {
			return this.email;
		}

		public Boolean active;

		public Boolean getActive() {
			return this.active;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final usersStruct other = (usersStruct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(usersStruct other) {

			other.id = this.id;
			other.last_name = this.last_name;
			other.first_name = this.first_name;
			other.email = this.email;
			other.active = this.active;

		}

		public void copyKeysDataTo(usersStruct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FORMATION_23S48_api_multithreading.length) {
					if (length < 1024 && commonByteArray_FORMATION_23S48_api_multithreading.length == 0) {
						commonByteArray_FORMATION_23S48_api_multithreading = new byte[1024];
					} else {
						commonByteArray_FORMATION_23S48_api_multithreading = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FORMATION_23S48_api_multithreading, 0, length);
				strReturn = new String(commonByteArray_FORMATION_23S48_api_multithreading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FORMATION_23S48_api_multithreading.length) {
					if (length < 1024 && commonByteArray_FORMATION_23S48_api_multithreading.length == 0) {
						commonByteArray_FORMATION_23S48_api_multithreading = new byte[1024];
					} else {
						commonByteArray_FORMATION_23S48_api_multithreading = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_FORMATION_23S48_api_multithreading, 0, length);
				strReturn = new String(commonByteArray_FORMATION_23S48_api_multithreading, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FORMATION_23S48_api_multithreading) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.last_name = readString(dis);

					this.first_name = readString(dis);

					this.email = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.active = null;
					} else {
						this.active = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_FORMATION_23S48_api_multithreading) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.last_name = readString(dis);

					this.first_name = readString(dis);

					this.email = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.active = null;
					} else {
						this.active = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// String

				writeString(this.last_name, dos);

				// String

				writeString(this.first_name, dos);

				// String

				writeString(this.email, dos);

				// Boolean

				if (this.active == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.active);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.id);

				// String

				writeString(this.last_name, dos);

				// String

				writeString(this.first_name, dos);

				// String

				writeString(this.email, dos);

				// Boolean

				if (this.active == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.active);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",last_name=" + last_name);
			sb.append(",first_name=" + first_name);
			sb.append(",email=" + email);
			sb.append(",active=" + String.valueOf(active));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(usersStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tBufferInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tBufferInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				usersStruct users = new usersStruct();
				personsStruct persons = new personsStruct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "persons");
				}

				int tos_count_tDBOutput_1 = 0;

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rowsToCommitCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				String tableName_tDBOutput_1 = "person";
				boolean whetherReject_tDBOutput_1 = false;

				java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
				calendar_tDBOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
				calendar_tDBOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
				long date_tDBOutput_1;

				java.sql.Connection conn_tDBOutput_1 = null;

				String properties_tDBOutput_1 = context.db_out_conn_AdditionalParams;
				if (properties_tDBOutput_1 == null || properties_tDBOutput_1.trim().length() == 0) {
					properties_tDBOutput_1 = "rewriteBatchedStatements=true&allowLoadLocalInfile=true";
				} else {
					if (!properties_tDBOutput_1.contains("rewriteBatchedStatements=")) {
						properties_tDBOutput_1 += "&rewriteBatchedStatements=true";
					}

					if (!properties_tDBOutput_1.contains("allowLoadLocalInfile=")) {
						properties_tDBOutput_1 += "&allowLoadLocalInfile=true";
					}
				}

				String url_tDBOutput_1 = "jdbc:mariadb://" + context.db_out_conn_Server + ":" + context.db_out_conn_Port
						+ "/" + context.db_out_conn_Database + "?" + properties_tDBOutput_1;

				String driverClass_tDBOutput_1 = "org.mariadb.jdbc.Driver";

				String dbUser_tDBOutput_1 = context.db_out_conn_Login;

				final String decryptedPassword_tDBOutput_1 = context.db_out_conn_Password;

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
				java.lang.Class.forName(driverClass_tDBOutput_1);

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1,
						dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;

				try (java.sql.Statement stmtClear_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
					stmtClear_tDBOutput_1.executeUpdate("DELETE FROM `" + tableName_tDBOutput_1 + "`");
				}

				String insert_tDBOutput_1 = "INSERT INTO `" + "person"
						+ "` (`id`,`last_name`,`first_name`,`email`,`active`,`slug`) VALUES (?,?,?,?,?,?)";
				int batchSize_tDBOutput_1 = 100;
				int batchSizeCounter_tDBOutput_1 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tJavaFlex_1 begin ] start
				 */

				ok_Hash.put("tJavaFlex_1", false);
				start_Hash.put("tJavaFlex_1", System.currentTimeMillis());

				currentComponent = "tJavaFlex_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "users");
				}

				int tos_count_tJavaFlex_1 = 0;

// start part of your Java code
				HashSet<String> slugs = new HashSet<String>();

				/**
				 * [tJavaFlex_1 begin ] stop
				 */

				/**
				 * [tBufferInput_1 begin ] start
				 */

				ok_Hash.put("tBufferInput_1", false);
				start_Hash.put("tBufferInput_1", System.currentTimeMillis());

				currentComponent = "tBufferInput_1";

				int tos_count_tBufferInput_1 = 0;

				int nb_line_tBufferInput_1 = 0;

				String[] row_tBufferInput_1 = new String[5];
				for (int n = 0; n < globalBuffer.size(); n++) {
					row_tBufferInput_1 = (String[]) globalBuffer.get(n);
					if (0 < row_tBufferInput_1.length) {

						users.id = ParserUtils.parseTo_int(row_tBufferInput_1[0]);

					}

					if (1 < row_tBufferInput_1.length) {

						users.last_name = row_tBufferInput_1[1];

					}

					else {
						users.last_name = null;
					}
					if (2 < row_tBufferInput_1.length) {

						users.first_name = row_tBufferInput_1[2];

					}

					else {
						users.first_name = null;
					}
					if (3 < row_tBufferInput_1.length) {

						users.email = row_tBufferInput_1[3];

					}

					else {
						users.email = null;
					}
					if (4 < row_tBufferInput_1.length) {

						users.active = ParserUtils.parseTo_Boolean(row_tBufferInput_1[4]);

					}

					/**
					 * [tBufferInput_1 begin ] stop
					 */

					/**
					 * [tBufferInput_1 main ] start
					 */

					currentComponent = "tBufferInput_1";

					tos_count_tBufferInput_1++;

					/**
					 * [tBufferInput_1 main ] stop
					 */

					/**
					 * [tBufferInput_1 process_data_begin ] start
					 */

					currentComponent = "tBufferInput_1";

					/**
					 * [tBufferInput_1 process_data_begin ] stop
					 */

					/**
					 * [tJavaFlex_1 main ] start
					 */

					currentComponent = "tJavaFlex_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "users"

						);
					}

					persons.id = users.id;
					persons.last_name = users.last_name;
					persons.first_name = users.first_name;
					persons.email = users.email;
					persons.active = users.active;

// here is the main part of the component,
// a piece of code executed in the row
					String[] elements = { users.last_name };
					String slug = Slugyfier.unique(elements, slugs);
					slugs.add(slug);
					persons.slug = slug;

					tos_count_tJavaFlex_1++;

					/**
					 * [tJavaFlex_1 main ] stop
					 */

					/**
					 * [tJavaFlex_1 process_data_begin ] start
					 */

					currentComponent = "tJavaFlex_1";

					/**
					 * [tJavaFlex_1 process_data_begin ] stop
					 */

					/**
					 * [tDBOutput_1 main ] start
					 */

					currentComponent = "tDBOutput_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "persons"

						);
					}

					whetherReject_tDBOutput_1 = false;
					pstmt_tDBOutput_1.setInt(1, persons.id);

					if (persons.last_name == null) {
						pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(2, persons.last_name);
					}

					if (persons.first_name == null) {
						pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(3, persons.first_name);
					}

					if (persons.email == null) {
						pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(4, persons.email);
					}

					if (persons.active == null) {
						pstmt_tDBOutput_1.setNull(5, java.sql.Types.BOOLEAN);
					} else {
						pstmt_tDBOutput_1.setBoolean(5, persons.active);
					}

					if (persons.slug == null) {
						pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(6, persons.slug);
					}

					pstmt_tDBOutput_1.addBatch();
					nb_line_tDBOutput_1++;

					batchSizeCounter_tDBOutput_1++;
					if (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1) {
						try {
							int countSum_tDBOutput_1 = 0;
							for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
								countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED ? 0
										: 1);
							}
							rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
							insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
						} catch (java.sql.BatchUpdateException e) {
							globalMap.put("tDBOutput_1_ERROR_MESSAGE", e.getMessage());
							int countSum_tDBOutput_1 = 0;
							for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
								countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
							}
							rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
							insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
							System.err.println(e.getMessage());
						}

						batchSizeCounter_tDBOutput_1 = 0;
					}
					commitCounter_tDBOutput_1++;

					if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {

						try {
							int countSum_tDBOutput_1 = 0;
							for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
								countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : 1);
							}
							rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
							insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
						} catch (java.sql.BatchUpdateException e) {
							globalMap.put("tDBOutput_1_ERROR_MESSAGE", e.getMessage());
							int countSum_tDBOutput_1 = 0;
							for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
								countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
							}
							rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
							insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
							System.err.println(e.getMessage());

						}
						if (rowsToCommitCount_tDBOutput_1 != 0) {
						}
						conn_tDBOutput_1.commit();
						if (rowsToCommitCount_tDBOutput_1 != 0) {
							rowsToCommitCount_tDBOutput_1 = 0;
						}
						commitCounter_tDBOutput_1 = 0;

					}

					tos_count_tDBOutput_1++;

					/**
					 * [tDBOutput_1 main ] stop
					 */

					/**
					 * [tDBOutput_1 process_data_begin ] start
					 */

					currentComponent = "tDBOutput_1";

					/**
					 * [tDBOutput_1 process_data_begin ] stop
					 */

					/**
					 * [tDBOutput_1 process_data_end ] start
					 */

					currentComponent = "tDBOutput_1";

					/**
					 * [tDBOutput_1 process_data_end ] stop
					 */

					/**
					 * [tJavaFlex_1 process_data_end ] start
					 */

					currentComponent = "tJavaFlex_1";

					/**
					 * [tJavaFlex_1 process_data_end ] stop
					 */

					/**
					 * [tBufferInput_1 process_data_end ] start
					 */

					currentComponent = "tBufferInput_1";

					/**
					 * [tBufferInput_1 process_data_end ] stop
					 */

					/**
					 * [tBufferInput_1 end ] start
					 */

					currentComponent = "tBufferInput_1";

					nb_line_tBufferInput_1++;
				}
				globalMap.put("tBufferInput_1_NB_LINE", nb_line_tBufferInput_1);

				ok_Hash.put("tBufferInput_1", true);
				end_Hash.put("tBufferInput_1", System.currentTimeMillis());

				/**
				 * [tBufferInput_1 end ] stop
				 */

				/**
				 * [tJavaFlex_1 end ] start
				 */

				currentComponent = "tJavaFlex_1";

// end of the component, outside/closing the loop
				slugs = null;

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "users");
				}

				ok_Hash.put("tJavaFlex_1", true);
				end_Hash.put("tJavaFlex_1", System.currentTimeMillis());

				/**
				 * [tJavaFlex_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (batchSizeCounter_tDBOutput_1 != 0) {
						int countSum_tDBOutput_1 = 0;

						for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}
						rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;

						insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					}

				} catch (java.sql.BatchUpdateException e) {
					globalMap.put(currentComponent + "_ERROR_MESSAGE", e.getMessage());

					int countSum_tDBOutput_1 = 0;
					for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_1 = 0;

				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");

				}
				resourceMap.put("statementClosed_tDBOutput_1", true);
				if (commitCounter_tDBOutput_1 > 0 && rowsToCommitCount_tDBOutput_1 != 0) {

				}
				conn_tDBOutput_1.commit();
				if (commitCounter_tDBOutput_1 > 0 && rowsToCommitCount_tDBOutput_1 != 0) {

					rowsToCommitCount_tDBOutput_1 = 0;
				}
				commitCounter_tDBOutput_1 = 0;

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "persons");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tBufferInput_1 finally ] start
				 */

				currentComponent = "tBufferInput_1";

				/**
				 * [tBufferInput_1 finally ] stop
				 */

				/**
				 * [tJavaFlex_1 finally ] start
				 */

				currentComponent = "tJavaFlex_1";

				/**
				 * [tJavaFlex_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tBufferInput_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final api_multithreading api_multithreadingClass = new api_multithreading();

		int exitCode = api_multithreadingClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = (String[][]) globalBuffer.toArray(new String[globalBuffer.size()][]);

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		hastBufferOutput = true;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = api_multithreading.class.getClassLoader().getResourceAsStream(
					"formation_23s48/api_multithreading_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = api_multithreading.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("db_out_conn_Server", "id_String");
					if (context.getStringValue("db_out_conn_Server") == null) {
						context.db_out_conn_Server = null;
					} else {
						context.db_out_conn_Server = (String) context.getProperty("db_out_conn_Server");
					}
					context.setContextType("db_out_conn_AdditionalParams", "id_String");
					if (context.getStringValue("db_out_conn_AdditionalParams") == null) {
						context.db_out_conn_AdditionalParams = null;
					} else {
						context.db_out_conn_AdditionalParams = (String) context
								.getProperty("db_out_conn_AdditionalParams");
					}
					context.setContextType("db_out_conn_Login", "id_String");
					if (context.getStringValue("db_out_conn_Login") == null) {
						context.db_out_conn_Login = null;
					} else {
						context.db_out_conn_Login = (String) context.getProperty("db_out_conn_Login");
					}
					context.setContextType("db_out_conn_Database", "id_String");
					if (context.getStringValue("db_out_conn_Database") == null) {
						context.db_out_conn_Database = null;
					} else {
						context.db_out_conn_Database = (String) context.getProperty("db_out_conn_Database");
					}
					context.setContextType("db_out_conn_Port", "id_String");
					if (context.getStringValue("db_out_conn_Port") == null) {
						context.db_out_conn_Port = null;
					} else {
						context.db_out_conn_Port = (String) context.getProperty("db_out_conn_Port");
					}
					context.setContextType("db_out_conn_Password", "id_Password");
					if (context.getStringValue("db_out_conn_Password") == null) {
						context.db_out_conn_Password = null;
					} else {
						String pwd_db_out_conn_Password_value = context.getProperty("db_out_conn_Password");
						context.db_out_conn_Password = null;
						if (pwd_db_out_conn_Password_value != null) {
							if (context_param.containsKey("db_out_conn_Password")) {// no need to decrypt if it come
																					// from program argument or parent
																					// job runtime
								context.db_out_conn_Password = pwd_db_out_conn_Password_value;
							} else if (!pwd_db_out_conn_Password_value.isEmpty()) {
								try {
									context.db_out_conn_Password = routines.system.PasswordEncryptUtil
											.decryptPassword(pwd_db_out_conn_Password_value);
									context.put("db_out_conn_Password", context.db_out_conn_Password);
								} catch (java.lang.RuntimeException e) {
									// do nothing
								}
							}
						}
					}
					context.setContextType("extern_context_path", "id_String");
					if (context.getStringValue("extern_context_path") == null) {
						context.extern_context_path = null;
					} else {
						context.extern_context_path = (String) context.getProperty("extern_context_path");
					}
					context.setContextType("project_dir", "id_Directory");
					if (context.getStringValue("project_dir") == null) {
						context.project_dir = null;
					} else {
						context.project_dir = (String) context.getProperty("project_dir");
					}
					context.setContextType("nb_cpu", "id_Integer");
					if (context.getStringValue("nb_cpu") == null) {
						context.nb_cpu = null;
					} else {
						try {
							context.nb_cpu = routines.system.ParserUtils.parseTo_Integer(context.getProperty("nb_cpu"));
						} catch (NumberFormatException e) {
							System.err.println(String.format("Null value will be used for context parameter %s: %s",
									"nb_cpu", e.getMessage()));
							context.nb_cpu = null;
						}
					}
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("db_out_conn_Server")) {
				context.db_out_conn_Server = (String) parentContextMap.get("db_out_conn_Server");
			}
			if (parentContextMap.containsKey("db_out_conn_AdditionalParams")) {
				context.db_out_conn_AdditionalParams = (String) parentContextMap.get("db_out_conn_AdditionalParams");
			}
			if (parentContextMap.containsKey("db_out_conn_Login")) {
				context.db_out_conn_Login = (String) parentContextMap.get("db_out_conn_Login");
			}
			if (parentContextMap.containsKey("db_out_conn_Database")) {
				context.db_out_conn_Database = (String) parentContextMap.get("db_out_conn_Database");
			}
			if (parentContextMap.containsKey("db_out_conn_Port")) {
				context.db_out_conn_Port = (String) parentContextMap.get("db_out_conn_Port");
			}
			if (parentContextMap.containsKey("db_out_conn_Password")) {
				context.db_out_conn_Password = (java.lang.String) parentContextMap.get("db_out_conn_Password");
			}
			if (parentContextMap.containsKey("extern_context_path")) {
				context.extern_context_path = (String) parentContextMap.get("extern_context_path");
			}
			if (parentContextMap.containsKey("project_dir")) {
				context.project_dir = (String) parentContextMap.get("project_dir");
			}
			if (parentContextMap.containsKey("nb_cpu")) {
				context.nb_cpu = (Integer) parentContextMap.get("nb_cpu");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("db_out_conn_Password");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tLoop_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tLoop_1) {
			globalMap.put("tLoop_1_SUBPROCESS_STATE", -1);

			e_tLoop_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : api_multithreading");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 121373 characters generated by Talend Open Studio for Data Integration on the
 * December 1, 2023, 2:38:46 PM CET
 ************************************************************************************************/